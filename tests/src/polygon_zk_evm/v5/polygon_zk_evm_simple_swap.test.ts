import { processTest, populateTransaction} from "../../test.fixture";

const contractName = "Paraswap V5";

const testLabel = "Simple Swap"; // <= Name of the test
const testDirSuffix = "simple_swap"; // <= directory to compare device snapshots to
const testNetwork = "polygon_zk_evm";
const signedPlugin = false;

const contractAddr = "0xb83b554730d29ce4cb55bb42206c3e2c03e4a40a";
const chainID = 1101; // POLYGON_ZK_EVM

// From : https://zkevm.polygonscan.com/tx/0xb24762e3def1c06300ad40424201331dd9dae07f745f28d295483c096f096389
const inputData = "0x54e3f31b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000037eaa0ef3549a5bb7d431be78a3d99bd360d19e5000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000001d905c0000000000000000000000000000000000000000000000000001f9aa84f5d8fc7000000000000000000000000000000000000000000000000001fc3506458e2d400000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a3c2a819e3de7aca384c798269b3ce1cd0e437010000000000000000000000000000000000000000000000000000000003138800000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000067452c9d5ecda9dcd0bc49689925fb9c924e516b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f6ad3ccf71abb3e12becf6b3d2a74c963859adcd000000000000000000000000b83b554730d29ce4cb55bb42206c3e2c03e4a40a0000000000000000000000000000000000000000000000000000000000000148c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b83b554730d29ce4cb55bb42206c3e2c03e4a40a00000000000000000000000000000000000000000000000000000000674e12bd0000000000000000000000000000000000000000000000000000000001d905c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002837eaa0ef3549a5bb7d431be78a3d99bd360d19e54f9a0e7fd2bf6067db6994cf12e4495df938e6e9000000000000000000000000000000000000000000000000e1829cfe0000000000000000000000004f9a0e7fd2bf6067db6994cf12e4495df938e6e

// Create serializedTx and remove the "0x" prefix
const serializedTx = populateTransaction(contractAddr, inputData, chainID,"30");

const devices = [
  {
    name: "nanos",
    label: "Nano S",
    steps: 9 // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanosp",
    label: "Nano S+",
    steps: 7 // <= Define the number of steps for this test case and this device
  },
  {
    name: "nanox",
    label: "Nano X",
    steps: 7 // <= Define the number of steps for this test case and this device
  },
  // {
  //   name: "stax",
  //   label: "Stax",
  //   steps: 6 // <= Define the number of steps for this test case and this device
  // },
  // {
  //   name: "flex",
  //   label: "Flex",
  //   steps: 6 // <= Define the number of steps for this test case and this device
  // }
];

devices.forEach((device) =>
  processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx,testNetwork)
);
